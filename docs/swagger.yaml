basePath: /
definitions:
  models.Account:
    properties:
      SSO: {}
      URL:
        type: string
      allowProjectAdminsCreateUsers:
        type: boolean
      awsRegion:
        type: string
      billingAmount:
        type: string
      code:
        type: string
      companyid:
        type: string
      companyname:
        type: string
      currency: {}
      dashboardMessageHTML:
        type: string
      dashboardProjectsList:
        type: string
      datesignedup:
        type: string
      defaultUserType:
        type: string
      email-notification-enabled:
        type: boolean
      id:
        type: string
      industryCategoryId:
        type: string
      isStaging:
        type: boolean
      lang:
        type: string
      logo:
        type: string
      name:
        type: string
      paidUntilDateTime:
        type: string
      passwordPolicyIsOn:
        type: boolean
      paymentMethod:
        type: string
      pdfServerLink:
        type: string
      pricePlan:
        type: string
      priceplanType:
        type: string
      siteOwnerEmail:
        type: string
      siteOwnerName:
        type: string
      trialDaysRemaining:
        type: string
      trialExpiryDate:
        type: string
    type: object
  models.Activity:
    properties:
      activityType:
        type: string
      company:
        $ref: '#/definitions/models.Relationship'
      companyId:
        type: integer
      dateTime:
        type: string
      description:
        type: string
      dueDate:
        type: string
      extraDescription:
        type: string
      forUser:
        $ref: '#/definitions/models.Relationship'
      forUserId:
        type: integer
      forUserName:
        type: string
      id:
        type: integer
      isPrivate:
        type: integer
      item:
        $ref: '#/definitions/models.Relationship'
      itemId:
        type: integer
      itemLink:
        type: string
      latestActivityType:
        type: string
      link:
        type: string
      lockdown:
        $ref: '#/definitions/models.Relationship'
      lockdownId:
        type: integer
      project:
        $ref: '#/definitions/models.Relationship'
      projectId:
        type: integer
      publicInfo:
        type: string
      type:
        type: string
      user:
        $ref: '#/definitions/models.Relationship'
      userId:
        type: integer
    type: object
  models.ActivityIncluded:
    properties:
      companies: {}
      projects: {}
      users: {}
    type: object
  models.CreateRisk:
    properties:
      risk:
        $ref: '#/definitions/models.Risk'
    type: object
  models.CreateTimeEntry:
    properties:
      time-entry:
        $ref: '#/definitions/models.TimeEntry'
    type: object
  models.CreatedTimeEntry:
    properties:
      status:
        type: string
    type: object
  models.IntegrationsMeta:
    properties:
      account:
        type: string
      enabled:
        type: boolean
      folder:
        type: string
      folderName:
        type: string
    type: object
  models.Meta:
    properties:
      limit:
        type: integer
      nextCursor:
        type: string
      page:
        $ref: '#/definitions/models.MetaPage'
      prevCursor:
        type: string
    type: object
  models.MetaPage:
    properties:
      count:
        type: integer
      hasMore:
        type: boolean
      pageOffset:
        type: integer
      pageSize:
        type: integer
    type: object
  models.MinimalPerson:
    properties:
      companyId:
        type: string
      deleted:
        type: boolean
      id:
        type: string
      title:
        type: string
    type: object
  models.MultiActivity:
    properties:
      activities:
        items:
          $ref: '#/definitions/models.Activity'
        type: array
      included:
        $ref: '#/definitions/models.ActivityIncluded'
      meta:
        $ref: '#/definitions/models.Meta'
    type: object
  models.MultiProject:
    properties:
      included:
        $ref: '#/definitions/models.ProjectIncluded'
      meta:
        $ref: '#/definitions/models.Meta'
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
    type: object
  models.MultiTaskList:
    properties:
      STATUS:
        type: string
      tasklists:
        items:
          $ref: '#/definitions/models.Tasklist'
        type: array
    type: object
  models.NewTaskList:
    properties:
      applyDefaultToExistingTasks:
        type: boolean
      todo-list:
        $ref: '#/definitions/models.ToDoList'
    type: object
  models.OverallPerson:
    properties:
      permissions:
        $ref: '#/definitions/models.Permissions'
      person:
        $ref: '#/definitions/models.Person'
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
    type: object
  models.People:
    properties:
      STATUS:
        type: string
      people:
        items:
          $ref: '#/definitions/models.MinimalPerson'
        type: array
    type: object
  models.Permissions:
    properties:
      can-access-templates:
        type: boolean
      can-add-projects:
        type: boolean
      can-manage-people:
        type: boolean
      canAccessCalendar:
        type: boolean
      canManageCustomFields:
        type: boolean
      canManageProjectTemplates:
        type: boolean
      canViewProjectTemplates:
        type: boolean
    type: object
  models.Person:
    properties:
      administrator:
        type: boolean
      company-name:
        type: string
      companyId:
        type: string
      created-at:
        type: string
      deleted:
        type: boolean
      email-address:
        type: string
      first-name:
        type: string
      id:
        type: string
      im-handle:
        type: string
      im-service:
        type: string
      last-login:
        type: string
      last-name:
        type: string
      lengthOfDay:
        type: string
      marketoId:
        type: string
      permissions:
        $ref: '#/definitions/models.Permissions'
      phone-number-home:
        type: string
      phone-number-mobile:
        type: string
      phone-number-office:
        type: string
      phone-number-office-ext:
        type: string
      pid:
        type: string
      private-notes:
        type: string
      private-notes-text:
        type: string
      profile:
        type: string
      profile-text:
        type: string
      site-owner:
        type: boolean
      title:
        type: string
      twoFactorAuthEnabled:
        type: boolean
      user-name:
        type: string
      user-type:
        type: string
      userUUID:
        type: string
    type: object
  models.Project:
    properties:
      activePages:
        properties:
          billing:
            type: boolean
          board:
            type: boolean
          comments:
            type: boolean
          files:
            type: boolean
          finance:
            type: boolean
          forms:
            type: boolean
          gantt:
            type: boolean
          links:
            type: boolean
          list:
            type: boolean
          messages:
            type: boolean
          milestones:
            type: boolean
          notebooks:
            type: boolean
          riskRegister:
            type: boolean
          table:
            type: boolean
          tasks:
            type: boolean
          time:
            type: boolean
        type: object
      announcement:
        type: string
      category:
        $ref: '#/definitions/models.Relationship'
      company:
        $ref: '#/definitions/models.Relationship'
      createdAt:
        type: string
      createdBy:
        type: integer
      customFieldValues:
        items:
          $ref: '#/definitions/models.Relationship'
        type: array
      defaultPrivacy:
        type: string
      description:
        type: string
      directFileUploadsEnabled:
        type: boolean
      endAt:
        type: string
      financialBudgetRelationship:
        $ref: '#/definitions/models.Relationship'
      harvestTimersEnabled:
        type: boolean
      id:
        type: integer
      integrations:
        properties:
          oneDriveBusiness:
            $ref: '#/definitions/models.IntegrationsMeta'
          sharepoint:
            $ref: '#/definitions/models.IntegrationsMeta'
          xero:
            properties:
              baseCurrency:
                type: string
              connected:
                type: boolean
              countryCode:
                type: string
              enabled:
                type: boolean
              organisation:
                type: string
            type: object
        type: object
      isBillable:
        type: boolean
      isOnBoardingProject:
        type: boolean
      isProjectAdmin:
        type: boolean
      isSampleProject:
        type: boolean
      isStarred:
        type: boolean
      lastWorkedOn:
        type: string
      latestActivity:
        $ref: '#/definitions/models.Relationship'
      logo:
        type: string
      minMaxAvailableDates:
        properties:
          deadlinesFound:
            type: boolean
          maxEndDate:
            type: string
          minStartDate:
            type: string
          suggestedEndDate:
            type: string
          suggestedStartDate:
            type: string
        type: object
      name:
        type: string
      notifyCommentIncludeCreator:
        type: boolean
      notifyEveryone:
        type: boolean
      notifyTaskAssignee:
        type: boolean
      overviewStartPage:
        type: string
      ownedBy:
        type: integer
      portfolioCards:
        items:
          $ref: '#/definitions/models.Relationship'
        type: array
      privacyEnabled:
        type: boolean
      projectOwner:
        $ref: '#/definitions/models.Relationship'
      replyByEmailEnabled:
        type: boolean
      showAnnouncement:
        type: boolean
      skipWeekends:
        type: boolean
      startAt:
        type: string
      startPage:
        type: string
      status:
        type: string
      subStatus:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Relationship'
        type: array
      tasksStartPage:
        type: string
      timeBudget:
        $ref: '#/definitions/models.Relationship'
      type:
        type: string
      update:
        $ref: '#/definitions/models.Relationship'
      updatedAt:
        type: string
      updatedBy:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.Relationship'
        type: array
    type: object
  models.ProjectIncluded:
    properties:
      activities: {}
      companies: {}
      countries: {}
      customFieldProjects: {}
      customFields: {}
      industries: {}
      portfolioBoards: {}
      portfolioCards: {}
      portfolioColumns: {}
      projectBudgets: {}
      projectCategories: {}
      projectTaskStats: {}
      projectUpdates: {}
      tags: {}
      users: {}
    type: object
  models.ProjectUpdate:
    properties:
      notifyIds:
        type: string
      update:
        $ref: '#/definitions/models.Update'
    type: object
  models.Relationship:
    properties:
      id:
        type: integer
      meta:
        $ref: '#/definitions/models.Meta'
      type:
        type: string
    type: object
  models.ReturnedRisks:
    properties:
      included: {}
      meta: {}
      risks:
        items:
          $ref: '#/definitions/models.Risks'
        type: array
    type: object
  models.ReturnedTimeEntries:
    properties:
      STATUS:
        type: string
      time-entries:
        items:
          $ref: '#/definitions/models.ReturnedTimeEntryObject'
        type: array
    type: object
  models.ReturnedTimeEntryObject:
    properties:
      company-id:
        description: |-
          TicketId string `json:"ticket-id,omitempty"`
          CreatedAt string `json:"createdAt,omitempty"`
          TaskIsPrivate string `json:"taskIsPrivate,omitempty"`
          ParentTaskId string `json:"parentTaskId,omitempty"`
        type: string
      company-name:
        description: |-
          CanEdit bool `json:"canEdit,omitempty"`
          TaskEstimatedTime string `json:"taskEstimatedTime,omitempty"`
        type: string
      date:
        type: string
      description:
        type: string
      has-start-time:
        type: string
      hours:
        type: string
      id:
        type: string
      invoiceNo:
        type: string
      isbillable:
        type: string
      minutes:
        description: |-
          ParentTaskName string `json:"parentTaskName,omitempty"`
          DateUserPerspective string `json:"dateUserPerspective,omitempty"`
        type: string
      person-first-name:
        type: string
      person-id:
        type: string
      person-last-name:
        type: string
      project-id:
        type: string
      project-name:
        type: string
      project-status:
        type: string
      tags: {}
      todo-item-id:
        description: |-
          TaskTags interface{} `json:"task-tags,omitempty"`
          TaskIsSubTask string `json:"taskIsSubTask,omitempty"`
        type: string
      todo-item-name:
        type: string
      todo-list-id:
        description: |-
          IsBilled string `json:"isbilled,omitempty"`
          UpdatedDate string `json:"updated-date,omitempty"`
        type: string
      todo-list-name:
        description: TaskListId string `json:"tasklistId,omitempty"`
        type: string
    type: object
  models.Risk:
    properties:
      impactCost:
        type: boolean
      impactPerformance:
        type: boolean
      impactSchedule:
        type: boolean
      impactValue:
        type: string
      mitigationPlan:
        type: string
      probabilityValue:
        type: string
      source:
        type: string
      status:
        type: string
    type: object
  models.Risks:
    properties:
      canEdit:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: integer
      createdByUserId:
        type: integer
      createdOn:
        type: string
      deleted:
        type: boolean
      id:
        type: integer
      impact:
        type: string
      impactCost:
        type: boolean
      impactPerformance:
        type: boolean
      impactSchedule:
        type: boolean
      impactValue:
        type: integer
      lastChangedByUserId:
        type: integer
      lastChangedOn:
        type: string
      mitigationPlan:
        type: string
      probability:
        type: string
      probabilityValue:
        type: integer
      project: {}
      projectId:
        type: integer
      result:
        type: integer
      source:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: integer
    type: object
  models.SingleAccount:
    properties:
      STATUS:
        type: string
      account:
        $ref: '#/definitions/models.Account'
    type: object
  models.SinglePerson:
    properties:
      STATUS:
        type: string
      person:
        $ref: '#/definitions/models.Person'
    type: object
  models.SingleProject:
    properties:
      included:
        $ref: '#/definitions/models.ProjectIncluded'
      meta:
        $ref: '#/definitions/models.Meta'
      project:
        $ref: '#/definitions/models.Project'
    type: object
  models.Specification:
    properties:
      domain_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.Tasklist:
    properties:
      DLM: {}
      complete:
        type: boolean
      description:
        type: string
      id:
        type: string
      milestone-id:
        type: string
      name:
        type: string
      pinned:
        type: boolean
      position:
        type: integer
      private:
        type: boolean
      projectId:
        type: string
      projectName:
        type: string
      status:
        type: string
      uncompleted-count:
        type: integer
    type: object
  models.Tasks:
    properties:
      STATUS:
        type: string
      toDoItems:
        items:
          $ref: '#/definitions/models.ToDoItem'
        type: array
    type: object
  models.TimeEntry:
    properties:
      date:
        type: string
      description:
        type: string
      hours:
        type: integer
      isbillable:
        type: boolean
      minutes:
        type: integer
      person-id:
        type: integer
      tags:
        type: string
      time:
        type: string
    type: object
  models.ToDoItem:
    properties:
      DLM:
        type: integer
      attachments-count:
        type: integer
      canComplete:
        type: boolean
      canEdit:
        type: boolean
      canLogTime:
        type: boolean
      comments-count:
        type: integer
      company-id:
        type: integer
      company-name:
        type: string
      completed:
        type: boolean
      content:
        type: string
      created-on:
        type: string
      creator-avatar-url:
        type: string
      creator-firstname:
        type: string
      creator-id:
        type: integer
      creator-lastname:
        type: string
      description:
        type: string
      due-date:
        type: string
      due-date-base:
        type: string
      estimated-minutes:
        type: integer
      harvest-enabled:
        type: boolean
      has-dependencies:
        type: integer
      has-predecessors:
        type: integer
      has-reminders:
        type: boolean
      has-unread-comments:
        type: boolean
      hasTickets:
        type: boolean
      id:
        type: integer
      last-changed-on:
        type: string
      lockdownId:
        type: string
      order:
        type: integer
      parentTaskId:
        type: string
      position:
        type: integer
      predecessors: {}
      priority:
        type: string
      private:
        type: integer
      progress:
        type: integer
      project-id:
        type: integer
      project-name:
        type: string
      responsible-party-firstname:
        type: string
      responsible-party-id:
        type: string
      responsible-party-ids:
        type: string
      responsible-party-lastname:
        type: string
      responsible-party-names:
        type: string
      responsible-party-summary:
        type: string
      responsible-party-type:
        type: string
      start-date:
        type: string
      status:
        type: string
      tags: {}
      tasklist-isTemplate:
        type: boolean
      tasklist-lockdownId:
        type: string
      tasklist-private:
        type: boolean
      timeIsLogged:
        type: string
      todo-list-id:
        type: integer
      todo-list-name:
        type: string
      userFollowingChanges:
        type: boolean
      userFollowingComments:
        type: boolean
      viewEstimatedTime:
        type: boolean
    type: object
  models.ToDoList:
    properties:
      new-task-defaults:
        properties:
          change-follower-ids:
            type: string
          column-id:
            type: integer
          comment-follower-ids:
            type: string
          customFields: {}
          description:
            type: string
          due-date-offset:
            type: string
          estimated-minutes:
            type: integer
          grant-access-to:
            type: string
          pendingFileAttachments: {}
          priority:
            type: integer
          priorityText:
            type: string
          private:
            type: boolean
          reminders:
            properties:
              isRelative:
                type: boolean
              note:
                type: string
              people-assigned:
                type: boolean
              relative-number-days:
                type: integer
              time:
                type: string
              type:
                type: string
              user-id:
                type: integer
              usingOffSetDueDate:
                type: boolean
            type: object
          removeAllReminders:
            type: boolean
          responsible-party-id:
            type: string
          start-date-offset:
            type: string
          tags:
            properties:
              color:
                type: string
              id:
                type: integer
              name:
                type: string
              projectId:
                type: integer
            type: object
        type: object
    type: object
  models.Update:
    properties:
      health:
        type: string
      text:
        type: string
    type: object
host: localhost:8015
info:
  contact:
    email: eti@cisco.io
    name: API Support
  description: This is a Kosha REST service for exposing many teamwork features as
    REST APIs with better consistency, observability etc
  termsOfService: http://swagger.io/terms/
  title: Teamwork Connector API
  version: "1.0"
paths:
  /api/v1/me:
    get:
      consumes:
      - application/json
      description: |-
        Get current person's details
        Please refer to https://apidocs.teamwork.com/docs/teamwork/de01076fde3a5-get-current-user-details for more parameter options.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SinglePerson'
      summary: Get current person's details
      tags:
      - people
  /api/v1/people:
    get:
      consumes:
      - application/json
      description: Get a list of all people in the current user's company.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.People'
      summary: Get all people from current user's company.
      tags:
      - people
  /api/v1/people/{id}:
    get:
      consumes:
      - application/json
      description: Get specific persons' details
      parameters:
      - description: Enter person id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SinglePerson'
      summary: Get specific person
      tags:
      - people
  /api/v1/people/{id}/projects:
    get:
      consumes:
      - application/json
      description: List projects for specified person
      parameters:
      - description: Enter person id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiProject'
      summary: List projects for specified person
      tags:
      - people
  /api/v1/projects:
    get:
      consumes:
      - application/json
      description: |-
        List all projects
        Please refer to https://apidocs.teamwork.com/docs/teamwork/df7d06840ecdd-returns-a-list-of-projects for more parameter options.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiProject'
      summary: Get all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: |-
        Create single project in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/a0c29f3b330bd-create-project for more parameter options.
      parameters:
      - description: Enter project properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.SingleProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create new project
      tags:
      - projects
  /api/v1/projects/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete single project based on the project id logged in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/df61dac913b37-delete-project for more parameter options.
      parameters:
      - description: Enter project id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete single project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: |-
        List single project based on project ID
        Please refer to https://apidocs.teamwork.com/docs/teamwork/9daa306fff1d2-returns-a-project for more parameter options.
      parameters:
      - description: Enter project id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SingleProject'
      summary: Get single project
      tags:
      - projects
  /api/v1/projects/{id}/risks:
    get:
      consumes:
      - application/json
      description: |-
        List all risks in the project
        Please refer to https://apidocs.teamwork.com/docs/teamwork/3f3555d7cd5d0-get-risks-for-a-specific-project for more parameter options.
      parameters:
      - description: Enter project id
        in: path
        name: id
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnedRisks'
      summary: Get all risks associated with specified project
      tags:
      - risks
    post:
      consumes:
      - application/json
      description: |-
        Create a risk for a project in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/f6dfef8ed1b7f-create-a-risk-on-a-project for more parameter options.
      parameters:
      - description: Enter project risk properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.CreateRisk'
      - description: Enter project id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a risk for a project
      tags:
      - risks
  /api/v1/projects/{id}/tasklists:
    get:
      consumes:
      - application/json
      description: |-
        Lists task lists based on project ID
        Please refer to https://apidocs.teamwork.com/docs/teamwork/7ee4827082194-get-all-task-lists-for-a-project for more parameter options.
      parameters:
      - description: Enter project id
        in: path
        name: id
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiTaskList'
      summary: Retrieve a project's task list
      tags:
      - tasklists
    post:
      consumes:
      - application/json
      description: |-
        Create single tasklist in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/36c110772a850-create-task-list for more parameter options.
      parameters:
      - description: Enter tasklist properties
        in: body
        name: tasklist
        schema:
          $ref: '#/definitions/models.NewTaskList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create new tasklist
      tags:
      - tasklists
  /api/v1/projects/{id}/update:
    post:
      consumes:
      - application/json
      description: |-
        Update a project in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/3a875e7157506-create-a-project-update for more parameter options.
      parameters:
      - description: Enter project update properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.ProjectUpdate'
      - description: Enter project id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Add an update for a project
      tags:
      - projects
  /api/v1/projects/{project_id}/timeentry:
    get:
      consumes:
      - application/json
      description: |-
        List all time entries in the project
        Please refer to https://apidocs.teamwork.com/docs/teamwork/aa65992887407-retrieve-all-time-entries-for-a-project for more parameter options.
      parameters:
      - description: Enter project id
        in: path
        name: id
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnedTimeEntries'
      summary: Get all time entries associated with specified project
      tags:
      - timeentry
    post:
      consumes:
      - application/json
      description: |-
        Create a time entry for a project in the system
        Please refer to https://apidocs.teamwork.com/docs/teamwork/0a02f6155b979-create-a-time-entry for more parameter options.
      parameters:
      - description: Enter time entry properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.CreateTimeEntry'
      - description: Enter project id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create a time entry for a project
      tags:
      - timeentry
  /api/v1/projects/activity:
    get:
      consumes:
      - application/json
      description: |-
        Lists the latest activity across all projects ordered chronologically.
        Please refer to https://apidocs.teamwork.com/docs/teamwork/f207f625bd76e-latest-activity-all-projects for more parameter options.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiActivity'
      summary: List latest activity across all projects
      tags:
      - projects
  /api/v1/projects/update/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Remove an update made to a project
        Please refer to https://apidocs.teamwork.com/docs/teamwork/cfdb775e8ade2-delete-a-project-update for more parameter options.
      parameters:
      - description: Enter project update id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a project update
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: |-
        Change an update made to a project
        Please refer to https://apidocs.teamwork.com/docs/teamwork/aa0bc9bb0fd37-modify-a-project-update for more parameter options.
      parameters:
      - description: Enter project update properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.ProjectUpdate'
      - description: Enter project update id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Modify a project update
      tags:
      - projects
  /api/v1/projects/updates:
    get:
      consumes:
      - application/json
      description: |-
        List all updates across projects that the logged-in user can access.
        Please refer to https://apidocs.teamwork.com/docs/teamwork/2e4f8bf140cab-get-all-project-updates for more parameter options.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnedRisks'
      summary: Get all project updates
      tags:
      - projects
  /api/v1/risks:
    get:
      consumes:
      - application/json
      description: |-
        List all risks across projects
        Please refer to https://apidocs.teamwork.com/docs/teamwork/64d22ab985a58-get-all-risks for more parameter options.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnedRisks'
      summary: Get all risks
      tags:
      - risks
  /api/v1/risks/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Remove a risk
        Please refer to https://apidocs.teamwork.com/docs/teamwork/a2a40cec66701-deleting-a-risk-on-a-project for more parameter options.
      parameters:
      - description: Enter risk id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a risk
      tags:
      - risks
    put:
      consumes:
      - application/json
      description: |-
        Add an update to a project's risk
        Please refer to https://apidocs.teamwork.com/docs/teamwork/a1d50e01411b8-updating-a-risk-on-a-project for more parameter options.
      parameters:
      - description: Enter project risk properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.CreateRisk'
      - description: Enter risk id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update a project risk
      tags:
      - risks
  /api/v1/specification/list:
    get:
      consumes:
      - application/json
      description: Retrieve necessary environment variables
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Get connector specification details
      tags:
      - specification
  /api/v1/specification/test:
    post:
      consumes:
      - application/json
      description: Check if domain account can be verified
      parameters:
      - description: Enter auth and domain name properties
        in: body
        name: text
        schema:
          $ref: '#/definitions/models.Specification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SingleAccount'
      summary: Test auth against the specification
      tags:
      - specification
  /api/v1/stats/people/{id}:
    get:
      consumes:
      - application/json
      description: Get statistics for a particular person id
      parameters:
      - description: Enter person id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OverallPerson'
      summary: Get statistics for a particular person
      tags:
      - people
  /api/v1/tasklists/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete single tasklist based on the tasklist id logged in the system.
        Please refer to https://apidocs.teamwork.com/docs/teamwork/498ee4e9c4fa5-delete-a-task-list for more parameter options.
      parameters:
      - description: Enter tasklist id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete single tasklist
      tags:
      - tasklists
  /api/v1/tasklists/{id}/tasks:
    get:
      consumes:
      - application/json
      description: |-
        Lists tasks based on tasklist Id
        Please refer to https://apidocs.teamwork.com/docs/teamwork/a9b6130385c3e-get-all-tasks-on-a-given-task-list for more parameter options.
      parameters:
      - description: Enter tasklist id
        in: path
        name: id
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tasks'
      summary: Retrieve a tasklist's tasks
      tags:
      - tasklists
  /api/v1/timeentries:
    get:
      consumes:
      - application/json
      description: |-
        List all time entries across projects and tasks
        Please refer to https://apidocs.teamwork.com/docs/teamwork/4ea39d569915b-retrieve-all-time-entries-across-all-projects for more parameter options.
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnedTimeEntries'
      summary: Get all time entries
      tags:
      - timeentry
  /api/v1/timeentries/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Remove a time entry
        Please refer to https://apidocs.teamwork.com/docs/teamwork/c16cf6a573f70-delete-a-time-entry for more parameter options.
      parameters:
      - description: Enter time entry id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete a time entry
      tags:
      - timeentry
    put:
      consumes:
      - application/json
      description: |-
        Add an update to a time entry
        Please refer to https://apidocs.teamwork.com/docs/teamwork/e1320843e680e-update-a-time-entry for more parameter options.
      parameters:
      - description: Enter time entry properties
        in: body
        name: project
        schema:
          $ref: '#/definitions/models.CreateTimeEntry'
      - description: Enter time entry id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreatedTimeEntry'
      summary: Update a time entry
      tags:
      - timeentry
swagger: "2.0"
